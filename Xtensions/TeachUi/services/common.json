{
	"parameter_commons": {
		"reply": {
			"value": "reply",
			"name": "and says ...",
			"type": "text",
			"examples": {
				"0": ["You can use &lt;1&gt;, &lt;2&gt;, ... to reference parameters that usually appear in answers for this service. References to the database are possible as well, e.g. &lt;summary_0a&gt;."]
			}
		},
		"url": {
			"value": "url",
			"name": "with URL ...",
			"type": "text",
			"examples": {
				"0": ["https://sepia-framework.github.io", "https://example.com/some-api", "https://example.com/some-music-file"]
			}
		},
		"action": {
			"value": "action",
			"name": "Action (on, off, set ...): ",
			"examples": {
				"1": ["&lt;on&gt;", "&lt;off&gt;", "&lt;set&gt;", "&lt;show&gt;"],
				"2": [{"value": "on", "value_local": "einschalten"}],
				"3": ["switch on", "switch off", "activate", "increase", "open", "close", "start", "stop"]
			}
		},
		"number": {
			"value": "number",
			"name": "Number (11, 50%, 5$, ...): ",
			"examples": {
				"1": ["11", "50%", "5$"],
				"2": [{"input": "5$", "type": "currency", "value": "5"}, {"input": "2 persons", "type": "persons", "value": "2"}],
				"3": ["11", "5 Dollar", "50 percent", "2 persons"]
			}
		},
		"genre": {
			"value": "genre",
			"name": "Music genre",
			"examples": {
				"1": ["my", "rock", "metal", "hip-hop", "classic", "alternative", "indie", "chill", "blues", "jazz"],
				"2": [{"value": "classic", "found": "klassik", "value_local": "Klassik"}],
				"3": ["my", "rock", "metal", "hip-hop", "classic", "alternative", "indie", "chill", "blues", "jazz"]
			}
		},
		"media_controls": {
			"value": "media_controls",
			"name": "Media control (play, pause, next, ...)",
			"optional": true,
			"examples": {
				"1": ["&lt;play&gt;", "&lt;pause&gt;", "&lt;resume&gt;", "&lt;volume_up&gt;", "&lt;next&gt;"],
				"2": [{"value_local": "stoppen", "value": "stop"}],
				"3": ["next", "forward", "continue", "resume"]
			}
		},
		"data": {
			"value": "data",
			"name": "Generic data (JSON or value)",
			"type": "generic",
			"examples": {
				"1": ["my data", "42"],
				"2": [{"value":42}, {"value":"my data", "isGeneric":true}, {"value":{"text":"Hello", "type":"World"}}],
				"3": ["NOT-SUPPORTED"]
			}
		}
	},
	"commands": {
		"chat": {
			"command": "chat",
			"name": "Chat/smalltalk",
			"desc": "Use this command to define a simple reply to any input.",
			"help": "<p><u><b>Example:</b></u></p>
					<i>When I say ...</i>
					<br>What did the Buddhist say to the hot dog vendor?<br><br>
					<i>the assistant does ...</i><br>
					Chat/smalltalk<br><br>
					<i>and says ... (reply):</i><br>
					Make me one with everything.<br><br>"
				,
			"parameters": [{
				"alias": "reply"
			}]
		},
		"open_link": {
			"command": "open_link",
			"name": "Open link/website",
			"desc": "Use this command to open a website or any URL.",
			"help": "<p><u><b>Example:</b></u></p>
					<i>When I say ...</i>
					<br>Open the SEPIA homepage<br><br>
					<i>the assistant does ...</i><br>
					Open link/website<br><br>
					<i>with URL ... (url):</i><br>
					https://sepia-framework.github.io<br><br>
					<i>and says ... (answer_set):</i><br>
					Here is my homepage.<br><br>"
				,
			"parameters": [{
				"alias": "url"
			},{
				"alias": "reply",
				"value": "answer_set"
			},{
				"value": "title",
				"name": "Card title",
				"optional": true,
				"type": "text"
			},{
				"value": "description",
				"name": "Card description",
				"optional": true,
				"type": "text"
			},{
				"value": "icon_url",
				"name": "Link to card icon (URL)",
				"optional": true,
				"type": "text",
				"examples": {
					"0": [
						"Use an URL relative to the client, to your local server or any public resource, e.g.:<p>img/icon.png</p><p>http://[sepia-server-ip]:20726/assist/files/images/cards/link.png</p><p>https://sepia-framework.github.io/img/logo.png</p>"
					]
				}
			}]
		},
		"music_radio": {
			"command": "music_radio",
			"name": "Open music stream",
			"desc": "Use this command to start/stop a radio station, play a radio with a certain genre or start an audio stream (URL).",
			"help": "<p><u><b>Example:</b></u></p>
					<i>When I say ...</i>
					<br>Play my station<br><br>
					<i>the assistant does ...</i><br>
					Open music stream<br><br>
					<i>Radio station ... (radio_station):</i><br>
					EgoFM Pure<br><br>"
				,
			"parameters": [{
				"value": "radio_station",
				"name": "Radio station ...",
				"examples": {
					"1": ["size", "ego_fm_pure", "deluxe_lounge", "1live_diggi", "wdr2"],
					"2": [{"input": "EgoFM Pure", "value": "ego_fm_pure", "cache_entry": "ego_fm_pure"}],
					"3": ["Size Radio", "egoFM Pure", "WDR 2"]
				}
			},{
				"alias": "genre",
				"name": "or genre ...",
				"optional": true
			},{
				"alias": "url",
				"name": "or stream URL (requires station)",
				"optional": true
			},{
				"alias": "action",
				"name": "Action (start, stop)",
				"optional": true
			},{
				"alias": "reply",
				"name": "Custom answer for stream start",
				"optional": true
			}]
		},
		"music": {
			"command": "music",
			"name": "Search/play specific music",
			"desc": "Use this command to search music by song, artist, title etc. or play specific content of a supported service.",
			"help": "<p><u><b>Example:</b></u></p>
					<i>When I say ...</i>
					<br>Play music by Queen<br><br>
					<i>the assistant does ...</i><br>
					Search/play specific music<br><br>
					<i>Music service:</i><br>
					YouTube<br><br>
					<i>Playlist name:</i><br>
					Queen Greatest Hits<br><br>"
				,
			"parameters": [{
				"value": "music_service",
				"name": "Music service",
				"examples": {
					"1": ["&lt;embedded&gt;", "&lt;youtube&gt;", "&lt;youtube_embedded&gt;", "&lt;vlc_media_player&gt;", "&lt;spotify_link&gt;", "&lt;apple_music_link&gt;"],
					"2": [{"input": "YouTube embedded", "value": "youtube_embedded", "value_local": "YouTube Widget"}],
					"3": ["YouTube", "Spotify Link", "VLC"]
				}
			},{
				"value": "artist",
				"name": "Music artist",
				"examples": {
					"1": ["Queen", "Metallica", "Jimi Hendrix"],
					"2": [{"value": "Jimi Hendrix"}],
					"3": ["by Queen", "from Metallica", "by Jimi Hendrix"]
				}
			},{
				"value": "song",
				"name": "Song/Title",
				"examples": {
					"1": ["Bohemian Rhapsody", "Master Of Puppets", "Castles made of Sand"],
					"2": [{"value": "Castles made of Sand"}],
					"3": ["Song named Castles made of Sand"]
				},
				"optional": true
			},{
				"value": "music_album",
				"name": "Album",
				"examples": {
					"1": ["A Kind of Magic"],
					"2": [{"value": "A Kind of Magic"}],
					"3": ["from the album A Kind of Magic"]
				},
				"optional": true
			},{
				"value": "playlist_name",
				"name": "Playlist name",
				"examples": {
					"1": ["Queen Greatest Hits"],
					"2": [{"value": "Queen Greatest Hits"}],
					"3": ["Queen Greatest Hits playlist"]
				},
				"optional": true
			},{
				"alias": "genre",
				"name": "Music genre",
				"optional": true
			},{
				"value": "data",
				"name": "Service data (JSON or direct URL)",
				"type": "generic",
				"examples": {
					"1": ["https://www.youtube.com/embed/peENJe_ORdI"],
					"2": [{"value": {"uri": "https://www.youtube.com/embed/peENJe_ORdI", "service": "youtube"}}],
					"3": ["NOT-SUPPORTED"]
				},
				"optional": true
			},{
				"alias": "reply",
				"name": "Custom success answer(s)",
				"optional": true
			}]
		},
		"sentence_connect": {
			"command": "sentence_connect",
			"name": "Execute command(s)",
			"desc": "Use this command to define an alias for one or more other commands. If you define more than one sentence (seperated by '.') they will be called one after the other (if the client supports it!). 
					This command supports 5 special flexible input parameters: &lt;var1&gt; ... &lt;var5&gt;, see example 2. 
					Each 'var' represents exactly one word, consecutive 'var' are combined to one parameter (e.g. you need '&lt;var1&gt; &lt;var1&gt; &lt;var1&gt;' to match 'Statue of Liberty'), see example 3. 
					Note: you cannot use sentences that you've previously defined yourself.",
			"help": "<p><u><b>Example 1:</b></u></p>
					<i>When I say ...</i>
					<br>Morning briefing<br><br>
					<i>the assistant does ...</i><br>
					Execute command(s)<br><br>
					<i>using these sentences ... (sentences):</i><br>
					Start radio You FM just music. Open the tech news. How is the weather.<br><br>
					<i>and says ... (reply):</i><br>
					Here is your morning briefing.<br><br>
				<p><u><b>Example 2:</b></u></p>
					<i>When I say ...</i>
					<br>Show me &lt;var1&gt; by &lt;var2&gt;<br><br>
					<i>the assistant does ...</i><br>
					Execute command(s)<br><br>
					<i>using these sentences ... (sentences):</i><br>
					Search videos of &lt;var2&gt; &lt;var1&gt;.<br><br>
					<i>and says ... (reply):</i><br>
					Searching videos.<br><br>
				<p><u><b>Example 3:</b></u></p>
					<i>When I say ...</i>
					<br>Show me information about the &lt;var1&gt; &lt;var1&gt; &lt;var1&gt;<br><br>
					<i>the assistant does ...</i><br>
					Execute command(s)<br><br>
					<i>using these sentences ... (sentences):</i><br>
					What is &lt;var1&gt;. Where is &lt;var1&gt;.<br><br>
					<i>and says ... (reply):</i><br>
					Searching information.<br><br>"
				,
			"parameters": [{
				"value": "sentences",
				"name": "using these sentences ...",
				"examples": {
					"all": ["Info: This command supports 5 special flexible input parameters: &lt;var1&gt; ... &lt;var5&gt;. See command info for a full explanation."],
					"1": ["Good morning && Weather in Berlin && Tech news"],
					"2": [{"array": ["good morning", "weather at home", "tech news"]}],
					"3": ["Good morning. Show me the weather in Berlin. Show me tech news."]
				}
			},{
				"alias": "reply",
				"optional": true
			}]
		},
		"smartdevice": {
			"command": "smartdevice",
			"name": "Control smart home device",
			"desc": "Use this command to create specific actions for smart (home) devices. Usually the parameters expect certain, predefined types (see example 1) but 
					you can use the 'i_raw' modifier to use natural language or even create new types on-the-fly using JSON (see example 2).",
			"help": "<p><u><b>Example 1:</b></u></p>
					<i>When I say ...</i>
					<br>Let there be light<br><br>
					<i>the assistant does ...</i><br>
					Control smart home device<br><br>
					<i>Smart device (smart_device):</i><br>
					&lt;light&gt;;;Lamp 1<br><br>
					<i>Room (room):</i><br>
					&lt;bedroom&gt;<br><br>
					<i>Action (action):</i><br>
					&lt;set&gt;<br><br>
					<i>Value (smart_device_value):</i><br>
					&lt;percent&gt;;;70<br><br>
				<p><u><b>Example 2:</b></u></p>
					<i>When I say ...</i>
					<br>Red!<br><br>
					<i>the assistant does ...</i><br>
					Control smart home device<br><br>
					<i>Smart device (smart_device):</i><br>
					&lt;i_raw&gt;RGB Lamp 1<br><br>
					<i>Room (room):</i><br>
					{\"value\":\"party_room\", \"value_local\":\"Party room\", \"index\":\"1\"}<br><br>
					<i>Value (smart_device_value):</i><br>
					{\"value\":\"[255,0,0]\", \"type\":\"color\"}<br><br>
				<p><u><b>Example 3:</b></u></p>
					<i>When I say ...</i>
					<br>Where is mom?<br><br>
					<i>the assistant does ...</i><br>
					Control smart home device<br><br>
					<i>Smart device (smart_device):</i><br>
					{\"value\": \"sensor\", \"value_local\": \"Mom\", \"found\": \"mom\", \"index\": 1}<br><br>
					<i>Action (action):</i><br>
					&lt;show&gt;<br><br>
					<i>Custom answer(s):</i><br>
					Mom is &lt;3&gt;.<br><br>"
				,
			"parameters": [{
				"value": "smart_device",
				"name": "Smart device (Light, Heater, ...)",
				"examples": {
					"1": ["&lt;light&gt;;;1", "&lt;heater&gt;;;Floor 2", "&lt;sensor&gt;;;A38", "&lt;device&gt;;;Robo"],
					"2": [{"value_local": "das Licht", "device_tag": "Deckenleuchte", "value": "light"}],
					"3": ["Light 2", "Deckenleuchte", "Roller shutter"]
				}
			},{
				"value": "room",
				"name": "Room (living room, kitchen, ...)",
				"optional": true,
				"examples": {
					"1": ["&lt;livingroom&gt;;;1", "&lt;bath&gt;;;Bad", "&lt;bedroom&gt;;;OG2", "&lt;kitchen&gt;"],
					"2": [{"value_local": "im Badezimmer", "room_tag": "bad", "value": "bath"}],
					"3": ["living room", "bath", "Wohnzimmer", "Bad"]
				}
			},{
				"alias": "action",
				"optional": true
			},{
				"value": "smart_device_value",
				"name": "Number Value (50%, 20°C, ...): ",
				"optional": true,
				"examples": {
					"1": ["&lt;percent&gt;;;50", "&lt;plain&gt;;;11", "&lt;temperature&gt;;;17°c"],
					"2": [{"type": "number_temperature_c", "value": "17"}, {"type": "number_percent", "value": "50"}],
					"3": ["50%", "20°C", "70°F"]
				}
			},{
				"alias": "reply",
				"name": "Custom answer(s)",
				"optional": true
			}]
		},
		"client_controls": {
			"command": "client_controls",
			"name": "Execute a client control function",
			"desc": "Use this command to call a client control function like 'set sound volume' or 'open settings'. 
					You can also call external tools like <a href='https://www.npmjs.com/package/clexi' target='_blank'>CLEXI</a> (clexi) or 
					a <a href='https://github.com/SEPIA-Framework/sepia-mesh-nodes' target='_blank'>SEPIA Mesh-Node</a> (meshNode) with specific data directly from this client.",
			"help": "<p><u><b>Example 1:</b></u></p>
					<i>When I say ...</i>
					<br>Rock!<br><br>
					<i>the assistant does ...</i><br>
					Execute a client control function<br><br>
					<i>Action (action):</i><br>
					&lt;set&gt;<br><br>
					<i>Function (client_fun):</i><br>
					&lt;volume&gt;<br><br>
					<i>Generic data (data):</i><br>
					11<br><br>
				<p><u><b>Example 2:</b></u></p>
					<i>When I say ...</i>
					<br>More Rock<br><br>
					<i>the assistant does ...</i><br>
					Execute a client control function<br><br>
					<i>Function (client_fun):</i><br>
					&lt;media&gt;<br><br>
					<i>Media controls (media_controls):</i><br>
					&lt;next&gt;<br><br>
				<p><u><b>Example 3:</b></u></p>
					<i>When I say ...</i>
					<br>Call my node plugin<br><br>
					<i>the assistant does ...</i><br>
					Execute a client control function<br><br>
					<i>Action (action):</i><br>
					&lt;on&gt;<br><br>
					<i>Function (client_fun):</i><br>
					&lt;meshNode&gt;<br><br>
					<i>Generic data (data):</i><br>
					{ \"value\": { \"url\": \"http://localhost:20780\", \"plugin\": \"RuntimePlugin\", \"data\": {\"command\": [\"echo\", \"test\"] } } }<br><br>
				<p><u><b>Example 4:</b></u></p>
					<i>When I say ...</i>
					<br>Broadcast hello with CLEXI<br><br>
					<i>the assistant does ...</i><br>
					Execute a client control function<br><br>
					<i>Action (action):</i><br>
					&lt;on&gt;<br><br>
					<i>Function (client_fun):</i><br>
					&lt;clexi&gt;<br><br>
					<i>Additional data (data):</i><br>
					{ \"value\": { \"xtension\": \"clexi-broadcaster\", \"data\": { \"text\": \"Hello\", \"sender\": \"Me\" } } }<br><br>"
				,
			"parameters": [{
				"alias": "action"
			},{
				"value": "client_fun",
				"name": "Function (volume, view, runtime, ...)",
				"examples": {
					"1": ["&lt;settings&gt;", "&lt;volume&gt;", "&lt;alwaysOn&gt;", "&lt;media&gt;", "&lt;clexi&gt;", "&lt;runtimeCommands&gt;"],
					"2": [{"value_local": "the media player", "value": "media"}],
					"3": ["media player", "settings", "volume", "always-on mode"]
				}
			},{
				"alias": "media_controls",
				"optional": true
			},{
				"alias": "data",
				"optional": true
			},{
				"alias": "number",
				"optional": true
			},{
				"alias": "reply",
				"name": "Custom answer (before calling function)",
				"optional": true
			}]
		},
		"platform_controls": {
			"command": "platform_controls",
			"name": "Execute platform specific actions",
			"desc": "Use this command to create a single sentence that triggers different client actions for each device ID or platform type (e.g. call Intent in Android (type=androidActivity) and URL in browser client (type=url)). 
					Note: The device ID has highest priority, only if no device ID is given or no match is found the platform specific function will be called.",
			"help": "<p><u><b>Example 1:</b></u></p>
					<i>When I say ...</i>
					<br>Play Paradise City<br><br>
					<i>the assistant does ...</i><br>
					Execute platform specific actions<br><br>
					<i>Actions for specific device IDs (device_fun):</i><br>
					{ \"value\": { \"a1\": {\"type\": \"androidActivity\", \"data\": {\"action\": \"android.media.action.MEDIA_PLAY_FROM_SEARCH\", \"extras\": {\"query\": \"Paradise City\"} }} } }<br><br>
				<p><u><b>Example 2:</b></u></p>
					<i>When I say ...</i>
					<br>Start Paradise City<br><br>
					<i>the assistant does ...</i><br>
					Execute platform specific actions<br><br>
					<i>Android specific Intent or URL (android_fun):</i><br>
					{ \"value\": {\"type\": \"androidActivity\", \"data\": {\"action\": \"android.media.action.MEDIA_PLAY_FROM_SEARCH\", \"extras\": {\"query\": \"Paradise City\"} } } }<br><br>
					<i>Browser specific function or URL (browser_fun):</i><br>
					{ \"value\": {\"type\": \"url\", \"data\": {\"url\": \"spotify:track:3YBZIN3rekqsKxbJc9FZko:play\"} } }<br><br>"
					,
			"parameters": [{
				"value": "device_fun",
				"name": "Actions for specific device IDs",
				"type": "generic",
				"examples": {
					"1": ["NOT-SUPPORTED"],
					"2": [{"value": {"a1": {"type": "androidActivity", "data": {"action": "android.media.action.MEDIA_PLAY_FROM_SEARCH", "extras": {"query": "Paradise City"}}}}}],
					"3": ["NOT-SUPPORTED"]
				}
			},{
				"value": "android_fun",
				"name": "Android Intent (androidActivity, androidBroadcast)",
				"type": "generic",
				"examples": {
					"1": ["NOT-SUPPORTED"],
					"2": [{"value": {"type": "androidActivity", "data": {"action": "android.media.action.MEDIA_PLAY_FROM_SEARCH", "extras": {"query": "Paradise City"}}}}],
					"3": ["NOT-SUPPORTED"]
				}
			},{
				"value": "browser_fun",
				"name": "Browser specific function or URL (browserIntent, url)",
				"type": "generic"
			},{
				"value": "ios_fun",
				"name": "iOS specific action (iosIntent)",
				"type": "generic"
			},{
				"value": "windows_fun",
				"name": "Windows specific action (windowsIntent)",
				"type": "generic"
			}]
		},
		"frame_control": {
			"command": "frame_control",
			"name": "Control custom frame",
			"desc": "Use this command to control a custom frame (open/close/set data) if the client supports it. Custom frames are code pieces (usually mini HTML pages) that can be started/stopped, hook into the normal even cycle (input-response-action) and temporarily add additonal functionality to the client.",
			"help": "<p><u><b>Example:</b></u></p>
					<i>When I say ...</i>
					<br>Open my demo controls panel<br><br>
					<i>the assistant does ...</i><br>
					Control custom frame<br><br>
					<i>Path to frame file (URL):</i><br>
					&lt;assist_server&gt;/views/demo-view.html<br><br>
					<i>Action (action):</i><br>
					&lt;on&gt;<br><br>
					<i>Frame data (JSON string):</i><br>
					{\"data\": {\"my-info\": \"cool\"}}<br><br>
					<i>and says ... (reply):</i><br>
					Here is your view.<br><br>
				<p><u><b>Example 2:</b></u></p>
					<i>When I say ...</i>
					<br>_demo_frame_ Select TEST<br><br>
					<i>the assistant does ...</i><br>
					Control custom frame<br><br>
					<i>Action (action):</i><br>
					&lt;set&gt;<br><br>
					<i>Frame data (JSON string):</i><br>
					{\"functionName\": \"test\", \"data\": \"my_data\"}<br><br>
					<i>and says ... (reply):</i><br>
					Selecting TEST.<br><br>"
				,
			"parameters": [{
				"alias": "action"
			},{
				"alias": "url",
				"name": "Path to frame file (URL)",
				"examples": {
					"0": ["&lt;assist_server&gt;/views/clock.html", "&lt;custom_data&gt;/demo-view.html"]
				}
			},{
				"alias": "data",
				"name": "Frame data (JSON string)",
				"examples": {
					"1": ["NOT-SUPPORTED"],
					"2": [{"functionName": "test", "data": "my_data"}, {"data": {"custom": "on-open info etc."}}],
					"3": ["NOT-SUPPORTED"]
				}
			},{
				"alias": "reply",
				"optional": true
			}]
		},
		"mesh_node_plugin": {
			"command": "mesh_node_plugin",
			"name": "Call SEPIA Mesh-Node plugin",
			"desc": "Use this command to call a <a href='https://github.com/SEPIA-Framework/sepia-mesh-nodes' target='_blank'>SEPIA Mesh-Node</a> plugin via the SEPIA server. 
					In contrast to the client-controls version this command is secured by your SEPIA account and evaluated by the server which enables some extra features. 
					Note that the given URL referes to a path relative to the server as well and can be an IP inside your private home network where your SEPIA server is located. 
					You can refer to results of the Mesh-Node plugin call inside your success or fail answers. To do this use the variable &lt;result_KEY&gt; where 'KEY' refers to a 
					data field in your plugin result data, e.g. 'hello' in the 'HelloPlugin' example."
					,
			"help": "<p><u><b>Example:</b></u></p>
					<i>When I say ...</i>
					<br>Test the hello plugin<br><br>
					<i>the assistant does ...</i><br>
					Call SEPIA Mesh-Node plugin<br><br>
					<i>Mesh-Node URL (node_url):</i><br>
					http://localhost:20780<br><br>
					<i>Name of plugin (node_plugin_name):</i><br>
					HelloPlugin<br><br>
					<i>JSON string sent to plugin (node_plugin_data):</i><br>
					{ \"value\": {\"name\":\"Boss\"} }<br><br>
					<i>Success answer (reply_success):</i><br>
					Ok I understood &lt;result_hello&gt;<br><br>
					<i>Fail answer (reply_fail):</i><br>
					Sorry I could not get a result<br><br>"
				,
			"parameters": [{
				"value": "node_url",
				"name": "Mesh-Node URL",
				"type": "text",
				"examples": {
					"0": ["http://localhost:20780"]
				}
			},{
				"value": "node_plugin_name",
				"name": "Name of plugin",
				"type": "text",
				"examples": {
					"0": ["HelloPlugin"]
				}
			},{
				"value": "node_plugin_data",
				"name": "JSON string sent to plugin",
				"optional": true,
				"type": "generic",
				"examples": {
					"1": ["NOT-SUPPORTED"],
					"2": [{"value": {"name": "Boss"}}],
					"3": ["NOT-SUPPORTED"]
				}
			},{
				"value": "reply_success",
				"name": "Success answer",
				"optional": true,
				"type": "text",
				"examples": {
					"0": ["Ok I understood &lt;result_hello&gt;"]
				}
			},{
				"value": "reply_fail",
				"name": "Fail answer",
				"optional": true,
				"type": "text"
			}]
		}
	}
}